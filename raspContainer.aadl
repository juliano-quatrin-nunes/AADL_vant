package raspContainer
public
	with interSystemCom;
	with SEI;
	
	system raspberryContainer
		features
			com_bus: requires bus access interSystemCom::communicationInterfaceBus.impl;
	end raspberryContainer;
	
	system implementation RaspberryContainer.impl
		subcomponents
			cpu: processor Raspberry.impl;
			
			navio2: device Navio2.impl;
			ground_station: device GroundStation.impl;
			com_device: device CommunicationDevice.impl;
			
			communication_interface: process CommunicationInterface.impl;
			sensor_driver: process SensorDriver.impl;
			telemetry: process TelemetryProcess.server;	
			health_and_recorder: process HealthMonitorAndDataRecorder.impl;
			
		connections
			c1: port navio2.sensors_out -> sensor_driver.navio2_sensor_in;
			c2: port health_and_recorder.health_out -> communication_interface.health_in;
			c3: port telemetry.ground_commands_out -> communication_interface.ground_commands_in;
			c4: port sensor_driver.sensor_communication_out -> communication_interface.sensor_in;
			c5: port communication_interface.record_out -> health_and_recorder.record_external_in;
			c6: port sensor_driver.sensor_record_out -> health_and_recorder.record_sensor_in;
			c7: port sensor_driver.sensor_telemetry_out -> telemetry.telemetry_sensor_in;
			c8: port navio2.sensors_out -> sensor_driver.navio2_sensor_in;
			c9: port ground_station.commands_out -> telemetry.ground_commands_in;
			c10: port telemetry.telemetry_out -> ground_station.telemetry_in;
			c11: port communication_interface.telemetry_out -> telemetry.telemetry_external_in;
			c12: bus access com_bus <-> cpu.com_bus;
			c13: bus access com_bus <-> com_device.com_bus;
			c14: port com_device.com_out -> communication_interface.com_in;
			c15: port communication_interface.com_out -> com_device.com_in;
		
		flows
			flow_1: end to end flow navio2.flow1 -> c1 -> sensor_driver.flow1 -> c4 -> communication_interface.flow1 -> c15 -> com_device.flow1;
		
		properties
			Actual_Processor_Binding => (reference (cpu)) applies to telemetry, communication_interface, sensor_driver, health_and_recorder;
	end raspberryContainer.impl;


	processor Raspberry
		features
			com_bus: requires bus access interSystemCom::communicationInterfaceBus.impl;
		properties
			Scheduling_Protocol => (EDF); 
			SEI::MIPSCapacity => 1.0 MIPS;
	end Raspberry;
	
	processor implementation Raspberry.impl
		subcomponents
			ram: memory RAM.rasp;
	end Raspberry.impl;
	
	memory RAM
	end RAM;
	
	memory implementation RAM.rasp
		properties
    		Memory_Size => 1 GByte;
	end RAM.rasp;
	
	------------------- PROCESSES -------------------
	
	process TelemetryProcess
		features
			telemetry_external_in: in data port;
			telemetry_sensor_in: in data port;
			ground_commands_out: out event port;
			ground_commands_in: in event port;
			telemetry_out: out data port;
	end TelemetryProcess;
	
	process implementation TelemetryProcess.server
		subcomponents
			telemetry_thread: thread TelemetryThread.impl;
			commands_thread: thread CommandsThread.impl;
		connections
			c1: port telemetry_external_in -> telemetry_thread.telemetry_in;
			c2: port telemetry_sensor_in -> telemetry_thread.sensor_in;
			c3: port telemetry_thread.telemetry_out -> telemetry_out;
			c4: port ground_commands_in -> commands_thread.commands_in;
			c5: port commands_thread.commands_out -> ground_commands_out;
	end TelemetryProcess.server;
	
	process HealthMonitorAndDataRecorder 
		features
			record_external_in: in data port RecordData.impl;
			record_sensor_in: in data port SensorData.impl;
			health_out: out event port;
	end HealthMonitorAndDataRecorder;
	
	process implementation HealthMonitorAndDataRecorder.impl
		subcomponents
			health_thread: thread HealthMonitor.impl;
			data_recorder: thread DataRecorder.impl;
		connections
			c1: port record_external_in -> data_recorder.com_record;
			c2: port record_sensor_in -> data_recorder.sensor_record;
			c3: port health_thread.health_out -> health_out;
	end HealthMonitorAndDataRecorder.impl;
	
	process CommunicationInterface
		features 
			health_in: in event port;
			telemetry_out: out data port TelemetryData.impl;
			record_out: out data port RecordData.impl;
			sensor_in: in data port SensorData.impl;
			ground_commands_in: in event port;
			com_out: out data port;
			com_in: in data port;
		flows
			flow1: flow path sensor_in -> com_out;
	end CommunicationInterface;
	
	process implementation CommunicationInterface.impl
		subcomponents
			sensor_com: thread SensorCom.com;
			telemetry_and_commands: thread TelemetryCommands.impl;
			external_data_com: thread ExternalDataCom.impl;
		connections
			c1: port com_in -> telemetry_and_commands.external_telemetry_in;
			c2: port com_in -> external_data_com.data_in;
			c3: port sensor_com.sensor_out -> com_out;
			c4: port telemetry_and_commands.ground_commands_out -> com_out;
			c5: port telemetry_and_commands.telemetry_out -> telemetry_out;
			c6: port ground_commands_in -> telemetry_and_commands.ground_commands_in;
			c7: port external_data_com.data_out -> record_out;
			c8: port sensor_in -> sensor_com.sensor_in;
		flows
			flow1: flow path sensor_in -> c8 -> sensor_com.flow_sensor -> c3 -> com_out;
	end CommunicationInterface.impl;
	
	process SensorDriver
		features
			sensor_telemetry_out: out data port;
			sensor_communication_out: out data port;
			sensor_record_out: out data port;
			navio2_sensor_in: in data port SensorData.impl;
		flows
			flow1: flow path navio2_sensor_in -> sensor_communication_out;
	end SensorDriver;
	
	process implementation SensorDriver.impl
		subcomponents
			process_data: thread Driver_data_proc.impl;
			--sensor_external: thread SensorCom.sensor;
			--sensor_telemetry_recorder: thread SensorTelemetryRecorder.impl;
		connections			
			--c1: port navio2_sensor_in -> sensor_external.sensor_in;
			--c2: port navio2_sensor_in -> sensor_telemetry_recorder.sensor_in;
			--c3: port sensor_external.sensor_out -> sensor_communication_out;
			--c4: port sensor_telemetry_recorder.sensor_out -> sensor_record_out;
			--c5: port sensor_telemetry_recorder.sensor_out -> sensor_telemetry_out;
			
			c6: port navio2_sensor_in -> process_data.rawData_in;
			c7: port process_data.procData_out -> sensor_communication_out;
			c8: port process_data.procData_out -> sensor_record_out;
			c9: port process_data.procData_out -> sensor_telemetry_out;
		flows
			flow1: flow path navio2_sensor_in -> c6 -> process_data.flow1 -> c7 -> sensor_communication_out;
		
	end SensorDriver.impl;
	
	
	------------- DEVICES -------------
	device Navio2
		features
			sensors_out: out data port SensorData.impl;
		flows
			flow1: flow source sensors_out {Latency => 0ns .. 16666ns;};
	end Navio2;
	device implementation Navio2.impl
	end Navio2.impl;
	
	device GroundStation
		features
			commands_out: out event port;
			telemetry_in: in data port TelemetryData.impl;
	end GroundStation;
	device implementation GroundStation.impl
	end GroundStation.impl;
	
	device CommunicationDevice
		features
			com_bus: requires bus access interSystemCom::communicationInterfaceBus.impl;
			com_out: out data port;
			com_in: in data port;
		flows
			flow1: flow sink com_in {Latency => 0ns .. 16666ns;};
	end CommunicationDevice;
	device implementation CommunicationDevice.impl
	end CommunicationDevice.impl;
	
	------------- THREADS -------------	
	thread DataRecorder
	-- Records sensor data and other relevant info in the memory of the board
	-- Does it record on the RAM or an external memory (that would survive a loss of power)?
		features
			sensor_record: in data port SensorData.impl;
			com_record: in data port RecordData.impl;
	end DataRecorder;
	thread implementation DataRecorder.impl
		properties
			dispatch_protocol => periodic;
			period => 500 ms; 
			deadline => 500 ms; --Same as period?
			priority => 2;
			compute_execution_time => 10 ms .. 20 ms;
			dispatch_offset => 2 ms;
	end DataRecorder.impl;
	
	thread HealthMonitor
	-- Checks if the Raspberry Pi and its components work properly
	-- Not very fleshed out
		features
			health_out: out event port;
	end HealthMonitor;
	thread implementation HealthMonitor.impl
		properties
			dispatch_protocol => periodic;
			period => 100 ms; --Should it have a higher frequency?
			deadline => 100 ms; --Same as period?
			priority => 4;
			compute_execution_time => 5 ms .. 10 ms;
			dispatch_offset => 1 ms;
	end HealthMonitor.impl;
	
	thread Driver_data_proc 
	-- Processes raw data sent from the sensors into readable data for the various other components
	-- Could be separated into different threads for each different type of sensor
		features
			rawData_in: in data port SensorData.impl;
			procData_out: out data port;
		flows
			flow1: flow path rawData_in -> procData_out;
	end Driver_data_proc;
	thread implementation Driver_data_proc.impl
		properties
			dispatch_protocol => periodic;
			period => 3 ms; 
			deadline => 3 ms; --Same as period?
			priority => 5;
			compute_execution_time => 250 us .. 500 us;
			dispatch_offset => 50 us; -- Non-zero start time (should be lower? -> RAM write speed)
	end Driver_data_proc.impl;
	
	thread SensorCom
		features
			sensor_in: in data port SensorData.impl;
			sensor_out: out data port;
		flows 
			flow_sensor: flow path sensor_in -> sensor_out;	
	end SensorCom;
	thread implementation SensorCom.com -- Thread to communicate sensor data to the bus SHOULD BE REWORKED
	properties
		dispatch_protocol => periodic;
		period => 3 ms; 
		deadline => 3 ms; --Same as period?
		priority => 5;
		compute_execution_time => 250 us .. 500 us;
		dispatch_offset => 50 us; -- Non-zero start time
	end SensorCom.com;
	thread implementation SensorCom.sensor	-- Thread to fetch sensor data from the sensors (devices)
	properties
		dispatch_protocol => periodic;
		period => 3 ms; 
		deadline => 3 ms; --Same as period?
		priority => 5;
		compute_execution_time => 250 us .. 500 us;
		dispatch_offset => 50 us; -- Non-zero start time
	end SensorCom.sensor; -- Total combined deadline is 6ms
	
	thread TelemetryCommands
	-- Fetches telemetry data from the other components of the UAV via the bus connection to send them to the ground station
	-- AND
	-- Gets Ground Station commands to send them to the other components of the UAV via the bus connection
		features
			external_telemetry_in: in data port;
			telemetry_out: out data port TelemetryData.impl;
			ground_commands_in: in event port;
			ground_commands_out: out data port;
	end TelemetryCommands;
	thread implementation TelemetryCommands.impl -- Should be as fast as the thread that gets the GS commands
		properties
			dispatch_protocol => periodic;
			period => 200 ms;
			deadline => 200 ms; --Same as period?
			priority => 3;
			compute_execution_time => 10 ms .. 20 ms;
			dispatch_offset => 2 ms; -- Non-zero start time
	end TelemetryCommands.impl;
	
	thread ExternalDataCom
	-- Gets telemetry data from other components of the UAV via the bus connection
		features
			data_in: in data port;
			data_out: out data port RecordData.impl;
	end ExternalDataCom;
	thread implementation ExternalDataCom.impl -- Execution every 500ms
		properties
			dispatch_protocol => periodic;
			period => 500 ms; -- Should it be faster than or same as the Recorder?
			deadline => 500 ms; --Same as period?
			priority => 2;
			compute_execution_time => 10 ms .. 20 ms;
			dispatch_offset => 2 ms;
	end ExternalDataCom.impl;
	
	thread SensorTelemetryRecorder -- NOT USED ANYMORE
		features
			sensor_in: in data port SensorData.impl;
			sensor_out: out data port;
	end SensorTelemetryRecorder;
	thread implementation SensorTelemetryRecorder.impl
	end SensorTelemetryRecorder.impl;
	
	thread TelemetryThread
	-- Bundles sensor data with data from other systems of the UAV to send to the ground station
		features
			telemetry_in: in data port;
			sensor_in: in data port;
			telemetry_out: out data port;
	end TelemetryThread;
	thread implementation TelemetryThread.impl
		properties
			dispatch_protocol => periodic;
			period => 500 ms; -- Should it have a higher frequency?
			deadline => 500 ms; --Same as period?
			priority => 2;
			compute_execution_time => 10 ms .. 20 ms;
			dispatch_offset => 2 ms; -- Non-zero start time
	end TelemetryThread.impl;
	
	thread CommandsThread
	-- Listens for commands from the ground station and broadcasts them to the Communication Interface
	-- Listens periodically?
		features
			commands_in: in event port;
			commands_out: out event port;
	end CommandsThread;
	thread implementation CommandsThread.impl
		properties
			dispatch_protocol => periodic;
			period => 200 ms;
			deadline => 200 ms; --Same as period?
			priority => 3;
			compute_execution_time => 5 ms .. 20 ms;
			dispatch_offset => 500 us; -- Non-zero start time
	end CommandsThread.impl;
    ------------------------------------
	
	------------- ALL DATA -------------
	data HealthMessages
	end HealthMessages;
	data implementation HealthMessages.impl
	end HealthMessages.impl;
	
	data TelemetryData
	end TelemetryData;
	data implementation telemetryData.impl
	end telemetryData.impl;
	
	data recordData
	end recordData;
	data implementation recordData.impl
	end recordData.impl;
	
	data sensorData
	end sensorData;
	data implementation sensorData.impl
	end sensorData.impl;
	------------------------------------

end raspContainer;